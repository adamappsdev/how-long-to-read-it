{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","class","id","Result","display","result","time","CSSTransition","in","timeout","classNames","unmountOnExit","Form","onSubmit","handleSubmit","for","name","type","value","state","pages","onChange","handleChange","checked","pace","App","bind","document","title","event","target","this","setState","wpm","ppm","preventDefault","React","Component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.409a6da3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group'; // ES6\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Header(props) {\n  return (\n    <div class=\"element\" id=\"description\">\n      <p>This will calculate how many days (and minutes) you'll take reading a new book.</p>\n      <p>Reading has been found to be ...</p>\n      <p>Reading performances taken from: http://www.readingsoft.com/</p>\n      <p>Thanks Emre Can https://www.pexels.com/photo/brass-colored-chandelier-2079451/</p>\n    </div>\n  );\n}\n\nfunction Result(props) {\n  const display = props.display;\n  const result = props.result;\n  const time = props.time;\n  return (\n    <CSSTransition\n      in={display}\n      timeout={200}\n      classNames=\"alert\"\n      unmountOnExit\n    >\n      <div class=\"element\" id=\"results\">\n        <b>Assuming an average 300 words per page, your total reading time will be {time} minutes.</b>\n        <p>The #1 rule to lifelong reading is interpreting it as a regular form of practice. Setting some time aside to read every evening is akin to setting some time aside for moderate exercise in the morning.</p>\n        <b>If you're consisent, you'll finish it in {result} days.</b>\n        <p>People tend to overestimate how many books they can read in a month and underestimate how many books they can read in a year.</p>\n        <b>If you keep it up, you can finish {365 / result} books of similar magnitude in a year.</b>\n        <p>The key to consistent reading is not reading everything you find lying about, but rather being selective with the kind of literature you consume.</p>\n        <p>There are hundreds of millions of unique books in the world with several million being published every year. Given the magnitude, it is no surprise that worthwhile, well-written books are hard to come by while mediocre, poorly-written books are a dime a dozen. If you want to read more, you'll have to spend some time researching unread books as well as understanding and interpreting your own particular taste of literature. Amazon, Goodreads and other user-rich bibliographic websites are a good source for interpreting whether a particular book will be a drag or not. Old-fashioned skimming of a few pages may also be a particularly efficient way of evaluating the quality and value of the writing found within it. Understanding your own tastes, however, will take some more time as you can only uncover this particular quandary with enough attentive, regular reading.</p>\n        <p>Given the parameters are correct and daily consistency is adhered to, make a commitment to finish a book of this scope within some {result}±2 days, then move on to the next one.</p>\n        <p>Happy reading!</p>\n      </div>\n    </CSSTransition>\n  );\n}\n\nfunction Form(props) {\n  return (\n    <div class=\"element\" id=\"form\">\n      <form onSubmit={props.handleSubmit}>\n        <label for=\"pages\">Pages:</label>\n        <br />\n        <input\n          id=\"pages\"\n          name=\"pages\"\n          type=\"number\"\n          value={props.state.pages}\n          onChange={props.handleChange}\n        />\n        <br />\n        <label for=\"time\">Minutes spent reading per day:</label>\n        <br />\n        <input\n          id=\"time\"\n          name=\"time\"\n          type=\"number\"\n          value={props.state.time}\n          onChange={props.handleChange}\n        />\n        <hr />\n        Are you a fast reader?\n        <br />\n        <input \n          type=\"radio\" \n          id=\"fastest\"\n          name=\"pace\"\n          value=\"fastest\"\n          checked={props.state.pace === 'fastest'}\n          onChange={props.handleChange}\n        />\n        <label for=\"fastest\">I skim through books to get the idea (1000 wpm).</label>\n        <br />\n        <input \n          type=\"radio\" \n          id=\"fast\"\n          name=\"pace\"\n          value=\"fast\"\n          checked={props.state.pace === 'fast'}\n          onChange={props.handleChange}\n        />\n        <label for=\"fast\">I can speed-read everything (700 wpm).</label>\n        <br />\n        <input \n          type=\"radio\" \n          id=\"moderate\"\n          name=\"pace\"\n          value='moderate'\n          checked={props.state.pace === 'moderate'}\n          onChange={props.handleChange}\n        />\n        <label for=\"moderate\">My reading pace is fairly moderate (300 wpm).</label>\n        <br />\n        <input \n          type=\"radio\" \n          id=\"slow\"\n          name=\"pace\"\n          value=\"slow\"\n          checked={props.state.pace === 'slow'}\n          onChange={props.handleChange}\n        />\n        <label for=\"slow\">I take my time to digest each new sentence (150 wpm).</label>\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pages: 300,\n      time: 60,\n      pace: 'moderate'\n    };\n    this.display= false;\n    this.time = 0;\n    this.result = 0;\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    document.title = \"How Long to Read it?\";\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    var wpm;\n    switch(this.state.pace) {\n      case 'fastest':\n        wpm = 1000;\n        break;\n      case 'fast':\n        wpm = 700;\n        break;\n      case 'moderate':\n        wpm = 300;\n        break;\n      case 'slow':\n        wpm = 150;\n        break;\n      default:\n        wpm = 300;\n    }\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n    var ppm = wpm / 300; // average pages per minute\n    this.time = this.state.pages / ppm; // total time in minutes to finish entire book\n    this.result = this.time / this.state.time; // total days to finish entire book\n    this.display = true;\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div class=\"container\">\n        <div class=\"title\">\n          <h1>How Long to Read It?</h1>\n        </div>\n        <div class=\"sidebar\">\n          <Header/>\n        </div>\n        <div class=\"main\">\n          <Form \n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n            state={this.state}\n          />\n          <Result \n            display={this.display}\n            result={this.result}\n            time={this.time}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}